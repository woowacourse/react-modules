{"version":3,"file":"Modal.js","sourceRoot":"","sources":["Modal.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;AAEzC,OAAO,EAAqB,KAAK,EAAE,MAAM,OAAO,CAAC;AAEjD,OAAO,EACL,MAAM,EACN,MAAM,EACN,WAAW,EACX,WAAW,EACX,WAAW,GACZ,MAAM,kBAAkB,CAAC;AAC1B,OAAO,cAAc,MAAM,kCAAkC,CAAC;AAC9D,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAUjD,SAAS,KAAK,CAAC,KAAiB;IAC9B,MAAM,EACJ,QAAQ,EACR,UAAU,EACV,QAAQ,GAAG,QAAQ,EACnB,QAAQ,GAAG,GAAG,EACd,KAAK,EACL,oBAAoB,GAAG,IAAI,EAC3B,GAAG,IAAI,EACR,GAAG,KAAK,CAAC;IACV,MAAM,EAAE,GAAG,KAAK,EAAE,CAAC;IAEnB,MAAM,EAAE,kBAAkB,EAAE,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC;IAE1D,OAAO,CACL,4BACG,YAAY,CACX,cACE,GAAG,EAAE,WAAW,EAChB,EAAE,EAAE,EAAE,EACN,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,EAAE,EAAE,CAAC,YAEzC,eACE,GAAG,EAAE,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAC5D,IAAI,aAER,eAAK,GAAG,EAAE,WAAW,aAClB,KAAK,IAAI,uBAAK,KAAK,GAAM,EACzB,oBAAoB,IAAI,CACvB,iBAAQ,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,WAAW,YAC3C,cAAK,GAAG,EAAE,WAAW,EAAE,GAAG,EAAC,OAAO,GAAG,GAC9B,CACV,IACG,EACL,QAAQ,IACL,GACF,EACN,QAAQ,CAAC,IAAI,CACd,GACO,CACX,CAAC;AACJ,CAAC;AAED,eAAe,KAAK,CAAC","sourcesContent":["import { createPortal } from 'react-dom';\n\nimport { PropsWithChildren, useId } from 'react';\n\nimport {\n  bottom,\n  center,\n  CloseButton,\n  ModalHeader,\n  ModalLayout,\n} from '../css/Modal.css';\nimport useEscapeModal from '../../../../hooks/useEscapeModal';\nimport { closeButton } from '../../../../assets';\n\nexport interface ModalProps extends PropsWithChildren {\n  closeModal: () => void;\n  position?: 'center' | 'bottom';\n  maxWidth?: number;\n  title?: string;\n  isVisibleCloseButton?: boolean;\n}\n\nfunction Modal(props: ModalProps) {\n  const {\n    children,\n    closeModal,\n    position = 'center',\n    maxWidth = 500,\n    title,\n    isVisibleCloseButton = true,\n    ...rest\n  } = props;\n  const id = useId();\n\n  const { handleClickOverlay } = useEscapeModal(closeModal);\n\n  return (\n    <section>\n      {createPortal(\n        <div\n          css={ModalLayout}\n          id={id}\n          onClick={(e) => handleClickOverlay(e, id)}\n        >\n          <div\n            css={position === 'center' ? center(maxWidth) : bottom(maxWidth)}\n            {...rest}\n          >\n            <div css={ModalHeader}>\n              {title && <h2>{title}</h2>}\n              {isVisibleCloseButton && (\n                <button onClick={closeModal} css={CloseButton}>\n                  <img src={closeButton} alt=\"close\" />\n                </button>\n              )}\n            </div>\n            {children}\n          </div>\n        </div>,\n        document.body\n      )}\n    </section>\n  );\n}\n\nexport default Modal;\n"]}